from pyrogram import filters
from config.user_config import PREFIX
from utils import (
    Cmd, get_group, code, b, bq,
    helplist, Module, Argument as Arg, Feature, Command,
    plural, pnum, sec_to_str,
    ModifyPyrogramClient as Client,
    make_request
)
import asyncio
from bs4 import BeautifulSoup

cmd = Cmd(G:=get_group())

helplist.add_module(
    Module(
        "MineEvo",
        description="–ú–æ–¥—É–ª—å –¥–ª—è –∏–≥—Ä—ã @mine_evo_bot\n–ö–∞–Ω–∞–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏: @RimEVO\n–°–∫–∞—á–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å: https://github.com/RimMirK/RimEVO",
        author="@RimMirK & @kotcananacom",
        version='3.9.0'
    ).add_command(
        Command(['msetlogchat'], [], '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –õ–û–ì —á–∞—Ç (–∫—É–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å –æ—Ç—á–µ—Ç –æ –Ω–∞–π–¥–µ–Ω—ã—Ö –∫–µ–π—Å–∞—Ö)')
    ).add_command(
        Command(['msetworkerchat'], [], '–£—Å—Ç–∞–Ω–æ—á–∏—Ç—å –†–æ–±–æ—á–∏–π —á–∞—Ç (–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã)')
    ).add_command(
        Command(['msetdigbot'], [], '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –∫–æ–ø–∞–Ω–∏—è (–≥–¥–µ –Ω—É–∂–Ω–æ –∫–æ–ø–∞—Ç—å)')
    ).add_command(
        Command(['mine'], [], '–í—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–¥–∫—É (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)')
    ).add_command(
        Command(['mdig'], [], '–ù–∞—á–∞—Ç—å –∫–æ–ø–∞—Ç—å')
    ).add_command(
        Command(['mstopdig', 'mnodig', 'mundig'], [], '–ü–µ—Ä–µ—Å—Ç–∞—Ç—å –∫–æ–ø–∞—Ç—å')
    ).add_command(
        Command(['evo'], [Arg('–∑–∞–ø—Ä–æ—Å/–∫–æ–º–∞–Ω–¥–∞')], '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å/–∫–æ–º–∞–Ω–¥—É –≤ —Ä–æ–±–æ—á–∏–π —á–∞—Ç –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–∏–º–µ—Ä: .evo –≤—Ä–µ–º—è')
    ).add_command(
        Command(['bevo'], [Arg('–∑–∞–ø—Ä–æ—Å/–∫–æ–º–∞–Ω–¥–∞')], '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å/–∫–æ–º–∞–Ω–¥—É –±–æ—Ç—É –≤ –õ–° –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–∏–º–µ—Ä: .bevo –≤—Ä–µ–º—è')
    ).add_command(
        Command(['mprof', '–º–ø—Ä–æ—Ñ'], [], '–í—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å')
    ).add_command(
        Command(['mstat', 'ms', 'mstats', '–º—Å—Ç–∞—Ç–∞', '–º—Å—Ç–∞—Ç', '–º—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'], [],'–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞')
    ).add_command(
        Command(['mcases', '–º–∫', '–º–∫–µ–π—Å—ã'], [], '–í–µ–≤–µ—Å—Ç–∏ –∫–µ–π—Å—ã')
    ).add_command(
        Command(["mopen", "mcase", '–º–æ', '–º–æ—Ç–∫', '–º–æ—Ç–∫—Ä—ã—Ç—å'], [Arg('([—Ç–∏–ø –∫–µ–π—Å–∞] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]), ..')],'–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤. –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ –∫–µ–π—Å–æ–≤ –ü—Ä–∏–º–µ—Ä—ã: .–æ—Ç–∫ –∫ 36 | .–æ—Ç–∫ –∫—Ç 27 —Ä–∫—Ç 6 –∫ 3 ')
    ).add_command(
        Command(['–º–æ—Ç–∫–ª', 'mopenlim'], [Arg('–∫–æ–ª-–≤–æ')],'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤ –∑–∞ —Ä–∞–∑')
    ).add_command(
        Command(['mdelay'],    [Arg('–∑–∞–¥–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö', False)], '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –∫–æ–ø–∫—É / –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–¥–µ—Ä–∂–∫—É')
    ).add_command(
        Command(['matcdelay'], [Arg('–∑–∞–¥–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö', False)], '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –∞—Ç–∞–∫—É –±–æ—Å—Å–∞ / –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–¥–µ—Ä–∂–∫—É')
    ).add_command(
        Command(['mlsend'], [Arg('–Ω–∏–∫ —á–µ–ª–∞ –≤ –±–æ—Ç–µ'), Arg('—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑'), Arg('—Å—É–º–º–∞ (–ª–∏–º–∏—Ç) (–º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ-–ª–∏–º–∏—Ç. –¢–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Å–∞–º–æ)')], '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã')
    ).add_command(
        Command(["ab", '–∞–±', '–±—É—Ä', '–∞–≤—Ç–æ–±—É—Ä', '–∫–∞—á'], [], '–ö–∞—á–∞—Ç—å —Ç–æ–ø–ª–∏–≤–æ –∏ –∑–∞–ø—Ä–∞–≤–∏—Ç—å –±—É—Ä')
    ).add_command(
        Command(['mli'], [], '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ')
    ).add_command(
        Command(['mlp'], [], '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ –ø–∞—É–∑—É')
    ).add_command(
        Command(['mlr'], [], '–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É (—É–±—Ä–∞—Ç—å —Å –ø–∞—É–∑—ã)')
    ).add_command(
        Command(['mls'], [], '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É (–Ω–∞ —Å–æ–≤—Å–µ–º)')
    ).add_command(
        Command(['mla'], [Arg('–ø–µ—Ä–∏–æ–¥', False)], '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –∞–≤—Ç–æ-–ª–∏–º–∏—Ç–∞. 0 —á—Ç–æ–±—ã –≤—ã–∫–ª')
    ).add_command(
        Command(['mldelay'], [Arg('–∑–∞–¥–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö', False)], '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ª–∏–º–∏—Ç–æ–≤ / –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–¥–µ—Ä–∂–∫—É')
    ).add_command(
        Command(['mlv', 'mlvalue'], [Arg('–∑–Ω–∞—á–µ–Ω–∏–µ', False)], '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç / –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π')
    ).add_feature(
        Feature('–ê–≤—Ç–æ-–≤—ã–±–æ—Ä–∫–∞ —à–∞—Ö—Ç—ã', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–±–æ—Ä–∫–∞ —à–∞—Ö—Ç—ã –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è')
    ).add_feature(
        Feature('Log', '–û—Ç—á–µ—Ç –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–µ–π—Å–∞–º, –Ω–∞–π–¥–µ–Ω–Ω—ã–º –±—É—Å—Ç–µ—Ä–∞–º, —É–±–∏—Ç—ã–º –±–æ—Å—Å–∞–º')
    ).add_feature(
        Feature('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ü–æ–¥—Å—á–µ—Ç –Ω–∞–π–¥–µ–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –∫–æ–ø–∞–Ω–∏—è –∏ —É–±–∏—Ç—ã—Ö –±–æ—Å—Å–æ–≤')
    ).add_feature(
        Feature('–ê–≤—Ç–æ –∞—Ç–∞–∫–∞', '–°–∞–º–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏ –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –±–æ—Å—Å–∞ –ø—Ä–∏ –µ–≥–æ –≤—ã–±–æ—Ä–µ')
    ).add_feature(
        Feature('–ê–≤—Ç–æ –∞–≤—Ç–æ-–±—É—Ä', '–°–∞–º –∫–∞—á–∞–µ—Ç —Ç–æ–ø–ª–∏–≤–æ –∏ –∑–∞–ø—Ä–∞–≤–ª—è–µ—Ç –±—É—Ä')
    ).add_feature(
        Feature('–ê–≤—Ç–æ –ë–æ–Ω—É—Å', '–°–∞–º –ø–æ–ª—É—á–∞–µ—Ç –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ë–æ–Ω—É—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å')
    ).add_feature(
        Feature('–ê–≤—Ç–æ Thx', '–°–∞–º –≤–≤–æ–¥–∏—Ç –∫–æ–º–º–∞–Ω–¥—É thx')
    ).add_feature(
        Feature('–ê–≤—Ç–æ –ü—Ä–æ–º–æ', '–°–∞–º —Å–º–æ—Ç—Ä–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∏—Ö')
    )
)

M = 'MineEVO'

dig_bots = ["mine_evo_bot", "mine_evo_gold_bot", "mine_evo_emerald_bot"]

plural_raz = ["—Ä–∞–∑", "—Ä–∞–∑–∞", "—Ä–∞–∑"]

get_worker_chat = lambda app: app.db.get('MineEVO.config', 'worker_chat', 'mine_evo_bot')
get_log_chat = lambda app, thread=False: app.db.get('MineEVO.config', 'log_chat.thread') if thread else app.db.get('MineEVO.config', 'log_chat', 'me')
get_dig_bot = lambda app: app.db.get('MineEVO.config', 'digbot', 'mine_evo_bot')

# –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@Client.on_ready(group=get_group())
async def _on_ready(app, *_):
    ev = asyncio.get_event_loop()

    ev.create_task(digger(app)) # –∫–æ–ø–∞–ª–∫–∞
    ev.create_task(auto_thx(app)) # –∞–≤—Ço thx
    ev.create_task(start_autobonus(app)) # –∞–≤—Ç–æ –ë–æ–Ω—É—Å
    await asyncio.sleep(2)
    ev.create_task(start_autobur(app)) # –∞–≤—Ç–æ–±—É—Ä
    await asyncio.sleep(10)
    ev.create_task(start_limits(app)) # –ª–∏–º–∏—Ç—ã
    await asyncio.sleep(60*5)
    ev.create_task(auto_promo(app)) # –∞–≤—Ç–æ –ø—Ä–æ–º–æ


@cmd(['msetlogchat'])
async def _setlogchat(app, msg):
    await app.db.set("MineEVO.config", 'log_chat', msg.chat.id)
    await app.db.set("MineEVO.config", 'log_chat.thread', msg.message_thread_id)
    await msg.edit(b("–õ–æ–≥ —á–∞—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"))

@cmd(['msetworkerchat', 'msetworkchat'])
async def _setworkerchat(app, msg):
    await app.db.set("MineEVO.config", 'worker_chat', msg.chat.id)
    await msg.edit(b("–†–æ–±–æ—á–∏–π —á–∞—Ç —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"))

@cmd(['msetdigbot', 'msetdigchat'])
async def _setdigbot(app, msg):
    await app.db.set("MineEVO.config", 'digbot', msg.chat.id)
    await msg.edit(b("–ß–∞—Ç –¥–ª—è –∫–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"))

get_stats = lambda app, case, all=False: app.db.get(f'MineEVO.stats{".all" if all else ""}', case, 0)
fm = lambda num: f"{num:,}" if num >= 10000 else str(num)

# —Å–≤–æ–¥–∫–∞
@cmd(['mine'])  
async def _mine(app, msg):
    c = await app.db.get('MineEVO.stats', 'c', 0)
    all_c = await app.db.get('MineEVO.stats.all', 'c', 0)
    o = "‚õè –ö–æ–ø–∞—é: " + b(
            '–î–∞ <emoji id="5359300921123683281">‚úÖ</emoji>'
            if await app.db.get(M, 'work', False)
            else '–ù–µ—Ç <emoji id="5359457318062798459">‚ùå</emoji>', False
        ) + '\n'
    o += f"ü™® –í—Å–∫–æ–ø–∞–ª: {b(fm(c))} {b(plural(c, plural_raz))} | {b(fm(all_c))} {b(plural(all_c, plural_raz))}\n"
    o += f"üéÜ –ü–ª–∞–∑–º–∞: {b(fm(await get_stats(app, '–ø–ª–∞–∑–º–∞')))} | {b(fm(await get_stats(app, '–ø–ª–∞–∑–º–∞', True)))}\n\n"
    o += b('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–µ–π—Å–∞–º:\n')
    s = (
        (f"  ‚úâÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç: {             b(fm(await get_stats(app, '–∫—Ç'))) } | {b(fm(await get_stats(app, '–∫—Ç',  True)))} \n" if (await get_stats(app, '–∫—Ç'))  > 0 or (await get_stats(app, '–∫—Ç', True))  > 0 else '') +
        (f"  üßß –†–µ–¥–∫–∏–π –∫–æ–Ω–≤–µ—Ä—Ç: {      b(fm(await get_stats(app, '—Ä–∫—Ç')))} | {b(fm(await get_stats(app, '—Ä–∫—Ç', True)))} \n" if (await get_stats(app, '—Ä–∫—Ç')) > 0 or (await get_stats(app, '—Ä–∫—Ç', True)) > 0 else '') +
        (f"  üì¶ –ö–µ–π—Å: {                b(fm(await get_stats(app, '–∫')))  } | {b(fm(await get_stats(app, '–∫',   True)))} \n" if (await get_stats(app, '–∫'))   > 0 or (await get_stats(app, '–∫', True))   > 0 else '') +
        (f"  üó≥ –†–µ–¥–∫–∏–π –∫–µ–π—Å: {         b(fm(await get_stats(app, '—Ä–∫'))) } | {b(fm(await get_stats(app, '—Ä–∫',  True)))} \n" if (await get_stats(app, '—Ä–∫'))  > 0 or (await get_stats(app, '—Ä–∫', True))  > 0 else '') +
        (f"  üïã –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å: {     b(fm(await get_stats(app, '–º–∏—Ñ')))} | {b(fm(await get_stats(app, '–º–∏—Ñ', True)))} \n" if (await get_stats(app, '–º–∏—Ñ')) > 0 or (await get_stats(app, '–º–∏—Ñ', True)) > 0 else '') +
        (f"  üíé –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –∫–µ–π—Å: {    b(fm(await get_stats(app, '–∫—Ä'))) } | {b(fm(await get_stats(app, '–∫—Ä',  True)))} \n" if (await get_stats(app, '–∫—Ä'))  > 0 or (await get_stats(app, '–∫—Ä', True))  > 0 else '') +
        (f"  üé≤ –î–∞–π—Å –∫–µ–π—Å: {           b(fm(await get_stats(app, '–¥–∫'))) } | {b(fm(await get_stats(app, '–¥–∫',  True)))} \n" if (await get_stats(app, '–¥–∫'))  > 0 or (await get_stats(app, '–¥–∫', True))  > 0 else '') +
        (f"  üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å —Å —ç—Å–∫–∏–∑–∞–º–∏: { b(fm(await get_stats(app, '–ø—Å—ç')))} | {b(fm(await get_stats(app, '–ø—Å—ç', True)))} \n" if (await get_stats(app, '–ø—Å—ç')) > 0 or (await get_stats(app, '–ø—Å—ç', True)) > 0 else '') +
        (f"  üëú –°—É–º–∫–∞ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏: {  b(fm(await get_stats(app, '—Å—Å–ø')))} | {b(fm(await get_stats(app, '—Å—Å–ø', True)))} \n" if (await get_stats(app, '—Å—Å–ø')) > 0 or (await get_stats(app, '—Å—Å–ø', True)) > 0 else '') +
        (f"  üåå –ó–≤–µ–∑–¥–Ω—ã–π –∫–µ–π—Å: {       b(fm(await get_stats(app, '–∑–≤'))) } | {b(fm(await get_stats(app, '–∑–≤',  True)))} \n" if (await get_stats(app, '–∑–≤'))  > 0 or (await get_stats(app, '–∑–≤', True))  > 0 else '')
    )
    o += s if s else b("–ü—É—Å—Ç–æ\n")
    await msg.edit(o)
    

# –∫–æ–ø–∞—Ç–µ–ª—å
async def digger(app: Client):
    while True:
        if await app.db.get(M, 'work', False) == True:
            app.logger.debug('–∫–æ–ø')
            await app.send_message(await get_dig_bot(app), "‚õè –ö–æ–ø–∞—Ç—å")
            await asyncio.sleep(await app.db.get(M, 'delay', 3)) 
        else: return

# –∞—Ç–∞–∫–∞
async def attacker(app):
    while True:
        if await app.db.get(M, 'atc', False):
            app.logger.debug('–∞—Ç–∫')
            await app.send_message('mine_EVO_bot', "–∞—Ç–∫")
            await asyncio.sleep(await app.db.get(M, 'atc_delay', 3)) 
        else: return

# –∫–æ–ª-–≤–æ —Ç–æ–ø–ª–∏–≤–∞ –≤ –±—É—Ä–µ
async def check_fuel(app):
    for _ in range(10):
        bur_msg = await make_request(app, "–±—É—Ä", "mine_evo_bot", startswith='üöß –ê–≤—Ç–æ–±—É—Ä –∏–≥—Ä–æ–∫–∞', timeout=10)
        if bur_msg is None:
            await asyncio.sleep(10)
            continue
        st = bur_msg.text.split()
        return int(st[ st.index('—Å–∫–ª–∞–¥–µ:') + 1 ])

@cmd(["ab", '–∞–±', '–±—É—Ä', '–∞–≤—Ç–æ–±—É—Ä', '–∫–∞—á'])
async def do_autobur(app, msg=None):
    if msg:
        await msg.edit("üëå –ö–∞—á–∞—é –∏ –∑–∞–ø—Ä–∞–≤–ª—è—é –±—É—Ä")
        
    while True:
        app.logger.debug("–∫–∞—á")
        new_fuel_msg = await make_request(app, "–∫–∞—á", "mine_evo_bot", timeout=10)
        if new_fuel_msg is None:
            await asyncio.sleep(10)
            continue
        if '–∫–æ–Ω—á–∏–ª–∞—Å—å' in new_fuel_msg.text:
            app.logger.warning("–Ω–µ—Ñ—Ç—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å")
            break
        if '–•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ–ø–ª–∏–≤–æ–º!' in new_fuel_msg.text:
            app.logger.warning("–ë–∞–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω!")
            break
        if '–ø–æ–∑–∂–µ' in new_fuel_msg.text:
            app.logger.error("–ë—É—Ä–∞ –Ω–µ—Ç!")
            break
        await asyncio.sleep(2)
            
    app.logger.debug('–±—É—Ä')
    bur_msg = await make_request(app, "–±—É—Ä", "mine_evo_bot", timeout=10)
    if bur_msg is None: return
    
    await app.request_callback_answer(
        bur_msg.chat.id, bur_msg.id,
        callback_data=f"am_refuel:am_refuel:{app.me.id}"
    )

# –∞–≤—Ç–æ –∞–≤—Ç–æ-–±—É—Ä
async def start_autobur(app):
    app.logger.debug("–ü–æ–ø–æ–ª–Ω—è—é –±—É—Ä")
    while True:
        await do_autobur(app)
        await asyncio.sleep(60*60)

# –∞–≤—Ç–æ –ë–æ–Ω—É—Å
async def start_autobonus(app: Client):
    while True:
        await make_request(app, '–µ–±', await get_worker_chat(app), timeout=10)
        await asyncio.sleep(60*60*24 +1)

# –Ω–∞—á–∞—Ç—å –∫–æ–ø–∞—Ç—å
@cmd(['mdig'])
async def _dig(app, msg):
    if await app.db.get(M, 'work', False):
        await msg.edit("‚ùé –Ø –∏ —Ç–∞–∫ –∫–æ–ø–∞—é")
        return
    
    await app.db.set(M, 'work', True)

    await msg.edit("‚úÖ –∫–æ–ø–∞—é")
    await digger(app)
    
# –∑–∞–∫–æ–Ω—á–∏—Ç—å –∫–æ–ø–∞—Ç—å
@cmd(['mstopdig', 'mnodig', 'mundig'])
async def _stopdig(app: Client, msg):
    S = 'MineEVO.stats'
    if not await app.db.get(M, 'work', False):
        return await msg.edit(f'‚ùé –∞ —è –∏ –Ω–µ –∫–æ–ø–∞—é')

    await app.db.set(M, 'work', False)

    c = await app.db.get(S, 'c', 0)
    
    for var in (await app.db.getall(S)).keys():
        await app.db.delete(S, var)
    
    await msg.edit(f'‚ùé –Ω–µ –∫–æ–ø–∞—é. –£—Å–ø–µ–ª –∫–æ–ø–Ω—É—Ç—å {b(c)} {b(plural(c, plural_raz))}')


# –∑–∞–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –∫–æ–ø–∫—É
@cmd(['mdelay'])
async def _mdelay(app, msg):
    try:
        delay = float(msg.text.split(maxsplit=1)[-1])
        await app.db.set(M, 'delay', delay)
        await msg.edit(
            f"‚è± –ó–∞–¥–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {b(pnum(delay))} c\n"
            f"–¢–∞–∫–∏–º —Ç–µ–º–ø–æ–º,\n"
            f"–∑–∞ {b('—á–∞—Å')} —Ç—ã –≤—Å–∫–æ–ø–∞–µ—à—å {b(f'{60*60/delay:,.0f}')} —Ä–∞–∑\n"
            f"–∑–∞ {b(f'–¥–µ–Ω—å {  60*60*24  /delay:,.0f}'    )} —Ä–∞–∑\n"
            f"–∑–∞ {b(f'–Ω–µ–¥–µ–ª—é {60*60*24*7/delay:,.0f}')} —Ä–∞–∑\n"
        )
    except:
        delay = await app.db.get(M, "delay", 3)
        await msg.edit(
            
            f'‚è± –¢–µ–∫—É—â–∞—è –∑–∞–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –∫–æ–ø–∫—É: {b(pnum(delay))}\n'
            f"–¢–∞–∫–∏–º —Ç–µ–º–ø–æ–º,\n"
            f"–∑–∞ {b('—á–∞—Å')} —Ç—ã –≤—Å–∫–æ–ø–∞–µ—à—å {b(f'{60*60/delay:,.0f}')} {plural(60*60     /delay, plural_raz)}\n"
            f"–∑–∞ {b(f'–¥–µ–Ω—å {  60*60*24  /delay:,.0f}'    )} {        plural(60*60*24  /delay, plural_raz)}\n"
            f"–∑–∞ {b(f'–Ω–µ–¥–µ–ª—é {60*60*24*7/delay:,.0f}')} {            plural(60*60*24*7/delay, plural_raz)}\n"
        )

# –∑–∞–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –∞—Ç–∞–∫—É
@cmd(['matcdelay'])
async def _matcdelay(app, msg):
    try:
        delay = float(msg.text.split(maxsplit=1)[-1])
        await app.db.set(M, 'atc_delay', delay)
        await msg.edit(
            f"‚è± –ó–∞–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –∞—Ç–∞–∫—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {b(pnum(delay))}\n"
        )
    except:
        await msg.edit(
            f"‚è± –¢–µ–∫—É—â–∞—è –∑–∞–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –∞—Ç–∞–∫—É: {b(pnum(await app.db.get(M, 'atc_delay', 3)))}"
        )

# –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–µ–Ω–µ–≥
pref = {
    'K':  10**(3*1),
    'M':  10**(3*2),
    'B':  10**(3*3),
    'T':  10**(3*4),
    'Qa': 10**(3*5),
    'Qi': 10**(3*6),
    'Sx': 10**(3*7),
    'Sp': 10**(3*8),
    'O':  10**(3*9),
    'N':  10**(3*10),
    'D':  10**(3*11),
    "Aa": 10**(3*12),
    "Bb": 10**(3*13),
    "Cc": 10**(3*14),
    "Dd": 10**(3*15),
    "Ee": 10**(3*16),
    "Ff": 10**(3*17),
    "Gg": 10**(3*18),
    "Hh": 10**(3*19),
    "Ii": 10**(3*20),
    "Jj": 10**(3*21),
    "Kk": 10**(3*22),
    "Ll": 10**(3*23),
    "Mm": 10**(3*24),
    "Nn": 10**(3*25),
    "Oo": 10**(3*26),
    "Pp": 10**(3*27),
    "Qq": 10**(3*28),
    "Rr": 10**(3*29),
    "Ss": 10**(3*30),
    "Tt": 10**(3*31),
    "Uu": 10**(3*32),
    "Vv": 10**(3*33),
    "Ww": 10**(3*34),
    "Xx": 10**(3*35),
    "Yy": 10**(3*36),
    "Zz": 10**(3*37)
}


# –õ–∏–º–∏—Ç—ã

plural_limit = ['–ª–∏–º–∏—Ç', '–ª–∏–º–∏—Ç–∞', '–ª–∏–º–∏—Ç–æ–≤']

# —Å–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞
async def start_limits(app):
    while True:
        if await app.db.get(M, 'limits.status', 'stopped') == 'process':
            
            current = await app.db.get(M, 'limits.current', 0)
            count = await app.db.get(M, 'limits.count', 0)
            
            if (current == count): 
                await app.db.set(M, 'limits.status', '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
                break
        
            nickname = await app.db.get(M, 'limits.nickname', '-')
            value = await app.db.get(M, 'limits.value', '-')
            autovalue = await app.db.get(M, 'limits.autovalue', 0)
            
            app.logger.info(f'–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {nickname} {value}')
            
            if (autovalue > 0) and (current % autovalue==0):
                avm = await make_request(app, "–±", await get_worker_chat(app), timeout=10)
                if not avm:
                    app.logger.error("limits autovalue: –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
                bl = ''
                testval = ''
                
                for l in avm.text.split("\n"):
                    if l.startswith("üíµ"):
                        bl = l
                        break
                bal = bl.split()[3]
                testval += bal.split('.')[0]
                pref = ''
                for s in bal:
                    if s.isalpha():
                        pref += s
                testval += pref
                
                lim_auto = await make_request(app, f"–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {nickname} {testval}", await get_worker_chat(app), timeout=10)
                
                value = str(lim_auto.text.split()[-1][:-1])
                
                await app.db.set(M, 'limits.value', value)
                app.logger.info(f"–ó–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {value}!")
                
                await asyncio.sleep(await app.db.get(M, 'limits.delay', 5))
                
                                
            
            m = await make_request(app, f'–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {nickname} {value}', await get_worker_chat(app), timeout=10, typing=False)
            
            if not m:
                app.logger.error(f'–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {nickname} {value} | –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª')
                await asyncio.sleep(20)
                continue
            
            if '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥' in m.text:
                app.logger.error(f'–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {nickname} {value} | –ù–µ—Ç –¥–µ–Ω–µ–≥!')
                await app.send_message(await get_log_chat(app), "‚ùóÔ∏è –ù–µ –º–æ–≥—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ª–∏–º–∏—Ç—ã: –¥–µ–Ω–µ–≥ –Ω–µ—Ç—É!", message_thread_id=await get_log_chat(app, True))
                await app.db.set(M, 'limits.status', "–î–µ–Ω–µ–≥ –Ω–µ—Ç—É!")
                break
            
            if f'–ø–µ—Ä–µ–≤–µ–ª(–∞) –∏–≥—Ä–æ–∫—É  {nickname}' in m.text:
                app.logger.info(m.text)
                await app.db.set(M, 'limits.current', (await app.db.get(M, 'limits.current', 0)) + 1)
                
            await asyncio.sleep(await app.db.get(M, 'limits.delay', 5))
            
        else:
            break
    
# –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
@cmd(['mlsend'])
async def _send(app, msg):
    status = await app.db.get(M, 'limits.status', 'stopped')
    if status == 'process':
        nickname = await app.db.get(M, 'limits.nickname', False)
        return await msg.edit(f"–Ø —É–∂–µ –∏ —Ç–∞–∫ –ø–µ—Ä–µ–≤–æ–∂—É –ª–∏–º–∏—Ç—ã!\n{nickname = }")
    elif status == 'paused':
        return await msg.edit(f"–õ–∏–º–∏—Ç—ã –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è, –Ω–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –ø–∞—É–∑–µ")
    
    try: _, nickname, count, value = msg.text.split(maxsplit=3)
    except ValueError: return await msg.edit(f"<code>{PREFIX}{msg.command[0]}</code> < –Ω–∏–∫ –∏–≥—Ä–æ–∫–∞ > < —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ > < —Å—É–º–º–∞ (–ª–∏–º–∏—Ç) > ")
    count = int(count)
    
    await app.db.set(M, 'limits.status', 'process')
    await app.db.set(M, 'limits.nickname', nickname)
    await app.db.set(M, 'limits.count', count)
    await app.db.set(M, 'limits.current', 0)
    await app.db.set(M, 'limits.value', value)
    
    delay = await app.db.get(M, 'limits.delay', 5)
    
    await msg.edit(
        f"üí≤ –ø–µ—Ä–µ–≤–æ–¥ –∏–≥—Ä–æ–∫—É ü™™ {code(nickname)}\n"
        f"üéö {b(count)} —Ä–∞–∑ –ø–æ üíµ {code(value)}.\n"
        f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ‚è≥ –ø—Ä–∏–º–µ—Ä–Ω–æ {b(sec_to_str(count * delay))}\n"
    )
    
    await start_limits(app)

# –∏–Ω—Ñ–æ
@cmd(['mli'])
async def _mli(app, msg):
    delay = await app.db.get(M, 'limits.delay', 5)
    if nickname := await app.db.get(M, 'limits.nickname', False):
        
        status    = await app.db.get(M, 'limits.status', 'stopped')
        count     = await app.db.get(M, 'limits.count')
        current   = await app.db.get(M, 'limits.current', 0)
        value     = await app.db.get(M, 'limits.value', '-')
        autovalue = await app.db.get(M, 'limits.autovalue', 0)
        
        await msg.edit(
            b("–¢–µ–∫—É—â–∏–π –ø–µ—Ä–µ–≤–æ–¥: \n\n") +
            f"‚ÑπÔ∏è {b('|')} –°—Ç–∞—Ç—É—Å: {b(status)}\n"
            f"‚è± {b('|')} –ó–∞–¥–¥–µ—Ä–∂–∫–∞: {b(sec_to_str(delay,False))}\n"
            f"üìë {b('|')} –ê–≤—Ç–æ-–ª–∏–º–∏—Ç: {b('–í—ã–∫–ª' if autovalue==0 else f'–∫–∞–∂–¥—ã–µ {autovalue} {plural(autovalue,plural_raz)}')}\n"
            f"ü™™ {b('|')} –ö–æ–º—É: {code(nickname)}\n"
            f"üíµ {b('|')} –°–∫–æ–ª—å–∫–æ: {code(value)}\n"
            f"üéö {b('|')} –°–∫–æ–ª—å–∫–æ —Ä–∞–∑: {b(count)} {plural(count, plural_raz)}\n"
            f"üìü {b('|')} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å: {b(current)} {plural(current, plural_limit)}\n"
            f"‚è∞ {b('|')} –µ—â–µ –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {b(count-current)} {plural(count-current, plural_limit)}\n"
            f"‚è≥ {b('|')} –ü—Ä–∏–º–µ—Ä–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å: {b(sec_to_str((count-current)*delay))}"
        )
    else:
        return await msg.edit(f"–ü–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–µ—Ç!\n\n–ó–∞–¥–¥–µ—Ä–∂–∫–∞: {b(delay)}")
        
# –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
@cmd(['mls'])
async def _mls(app, msg):
    await msg.edit("–ª–∏–º–∏—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã!")
    await app.db.set(M, 'limits.status', 'stopped')
    await app.db.set(M, 'limits.nickname', '-')
    await app.db.set(M, 'limits.count', 0)
    await app.db.set(M, 'limits.current', 0)
    await app.db.set(M, 'limits.value', '-')

# –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
@cmd(['mlp'])
async def _mlp(app, msg):
    await msg.edit("‚è∏ –õ–∏–º–∏—Ç—ã –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø–∞—É–∑—É!")
    await app.db.set(M, 'limits.status', 'paused')

    
# –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å (—É–±—Ä–∞—Ç—å —Å –ø–∞—É–∑—ã)
@cmd(['mlr'])
async def _mlr(app, msg):
    if await app.db.get(M, 'limits.status', 'stopped') not in ['paused', 'process']:
        return await msg.edit("–¢–∞–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∞—É–∑–µ –∏ –Ω–µ —Å—Ç–æ–∏—Ç!")
    await app.db.set(M, 'limits.status', 'process')
    
    await msg.edit("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    
    await start_limits(app)


# –∑–∞–¥–¥–µ—Ä–∂–∫–∞
@cmd(['mldelay'])
async def _mldelay(app, msg):
    try:
        delay = float(msg.text.split(maxsplit=1)[-1])
        await app.db.set(M, 'limits.delay', delay)
        await msg.edit(
            f"‚è± –ó–∞–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ª–∏–º–∏—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {b(pnum(delay))}\n"
            f"–¢–∞–∫–∏–º —Ç–µ–º–ø–æ–º,\n"
            f"–∑–∞ {b('—á–∞—Å')} —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å {b(f'{60*60/delay:,.0f}')} {plural(int(60*60     /delay), plural_limit)}\n"
            f"–∑–∞ {b(f'–¥–µ–Ω—å {  60*60*24  /delay:,.0f}'    )} {        plural(int(60*60*24  /delay), plural_limit)}\n"
            f"–∑–∞ {b(f'–Ω–µ–¥–µ–ª—é {60*60*24*7/delay:,.0f}')} {            plural(int(60*60*24*7/delay), plural_limit)}\n"
        )
    except:
        delay = pnum(await app.db.get(M, "limits.delay", 5))
        await msg.edit(
            f'‚è± –¢–µ–∫—É—â–∞—è –∑–∞–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ª–∏–º–∏—Ç–æ–≤: {b(delay)}\n'
            f"–¢–∞–∫–∏–º —Ç–µ–º–ø–æ–º,\n"
            f"–∑–∞ {b('—á–∞—Å')} —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å {b(f'{60*60/delay:,.0f}')} {plural(int(60*60     /delay), plural_limit)}\n"
            f"–∑–∞ {b(f'–¥–µ–Ω—å {  60*60*24  /delay:,.0f}'    )} {        plural(int(60*60*24  /delay), plural_limit)}\n"
            f"–∑–∞ {b(f'–Ω–µ–¥–µ–ª—é {60*60*24*7/delay:,.0f}')} {            plural(int(60*60*24*7/delay), plural_limit)}\n"
        )

@cmd(['mlv', 'mlvalue'])
async def _mlvalue(app, msg):
    try: _, value = msg.text.split(maxsplit=1)
    except ValueError: return await msg.edit(f"üíµ –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {code(await app.db.get(M, 'limits.value', '--'))}")
    await app.db.set(M, 'limits.value', value)
    await msg.edit(f"üíµ –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {code(value)}")

@cmd(['mla', 'mlautovalue'])
async def _mlautoalue(app, msg):
    autovalue = await app.db.get(M, 'limits.autovalue', 0)
    try: _, value = msg.text.split(maxsplit=1)
    except ValueError: return await msg.edit(f"üíµ –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {code(autovalue) if autovalue > 0 else b('–í—ã–∫–ª')}")
    await app.db.set(M, 'limits.autovalue', int(value))
    await msg.edit(f"üíµ –ê–≤—Ç–æ–∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞–∂–¥—ã–µ {code(value)} {plural(int(value), plural_raz)}")
        

# –æ—Ç–∫—Ä—ã–≤–∞–Ω–∏–µ –∫–µ–π—Å–æ–≤
@cmd(["mopen", "mcase", '–º–æ', '–º–æ—Ç–∫', '–º–æ—Ç–∫—Ä—ã—Ç—å'])
async def _open(app, msg):
    try:
        _, *values = msg.text.split()

        if len(values) % 2 != 0:
            raise ValueError()

        await msg.edit(f"üì§ –æ—Ç–∫—Ä—ã–≤–∞—é {f', '.join([f'{values[i]} {values[i + 1]}' for i in range(0, len(values), 2)])}")

        for amout, case_type in [(values[i], values[i + 1]) for i in range(0, len(values), 2)]:
            await asyncio.sleep(2)

            try: amout = int(amout)
            except ValueError:
                amout, case_type = case_type, amout
                amout = int(amout)

            caselim = await app.db.get(M, 'caselim', 20)

            groups = [*[caselim]*(amout//caselim), amout%caselim]
            try: groups.remove(0)
            except: pass

            for am in groups:
                await asyncio.sleep(2)
                await app.send_message(msg.chat.id, f"–æ—Ç–∫—Ä—ã—Ç—å {case_type} {am}")

    except (IndexError, ValueError) as e: 
        print(e)
        await msg.edit(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!"
        )

# —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–æ–≤ –∑–∞ —Ä–∞–∑
@cmd(['–º–æ—Ç–∫–ª', 'mopenlim'])
async def _mopenlim(app, msg):
    try:
        lim = int(msg.text.split(maxsplit=1)[-1])
        await app.db.set(M, 'caselim', lim)
        await msg.edit(b("–ì–æ—Ç–æ–≤–æ!"))
    except IndexError:
        return await msg.edit(b('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!'))

# –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏—è. –†–µ–∂–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
split_to = lambda text, to=None: text if to is None else (text+' ')[:text.find(to)]

# –µ–º–æ–¥–∑–∏
SAD = '<emoji id=5319007148565341481>‚òπÔ∏è</emoji>'
LOADING = '<emoji id=5821116867309210830>‚è≥</emoji>'

# —à–∞–±–ª–æ–Ω –¥–ª—è .evo –∏ .bevo
layout = (''
    + b("–ó–∞–ø—Ä–æ—Å:") + "\n"
    + bq('{0}') + "\n"
    + b("–û—Ç–≤–µ—Ç –ë–æ—Ç–∞:") + "\n"
    + bq('{1}')
)

# –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É
@cmd('evo')
async def _evo(app, msg):
    await msg.edit(f'{LOADING} –ó–∞–≥—Ä—É–∑–∫–∞...')
    query = msg.text.split(maxsplit=1)[1]
    answer = await make_request(app, query, await get_worker_chat(app), timeout=10, additional_filter=filters.user("mine_evo_bot"))
    await msg.edit(f"{SAD} –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª" if answer is None else layout.format(query, answer.text.html),
        disable_web_page_preview=True
    )

# –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É –≤ –õ–°
@cmd('bevo')
async def _bevo(app, msg):
    await msg.edit(f'{LOADING} –ó–∞–≥—Ä—É–∑–∫–∞...')
    query = msg.text.split(maxsplit=1)[1]
    answer = await make_request(app, query, "mine_evo_bot", timeout=10, additional_filter=filters.user("mine_evo_bot"))
    await msg.edit(f"{SAD} –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª" if answer is None else layout.format(query, answer.text.html),
        disable_web_page_preview=True
    )

# –ø–æ–∫–∞–∑–∞—Ç—å –∫–µ–π—Å—ã
@cmd(['mcases', '–º–∫', '–º–∫–µ–π—Å—ã'])
async def _cases(app, msg):
    await msg.edit(f'{LOADING} –ó–∞–≥—Ä—É–∑–∫–∞...')
    answer = await make_request(app, '–∫–µ–π—Å—ã', await get_worker_chat(app), 'üì¶ –ö–µ–π—Å—ã –∏–≥—Ä–æ–∫–∞', 10)
    await msg.edit(
        f"{SAD} –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª" if answer is None else split_to(split_to(answer.text.html, 'üî•'), '–û—Ç–∫—Ä—ã—Ç—å'),
        disable_web_page_preview=True
    )

# –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
@cmd(['mprof', 'mp', '–º–ø', '–º–ø—Ä–æ—Ñ', '–º–ø—Ä–æ—Ñ–∏–ª—å'])
async def _prof(app, msg):
    await msg.edit(f'{LOADING} –ó–∞–≥—Ä—É–∑–∫–∞...')
    answer = await make_request(app, '–ø—Ä–æ—Ñ–∏–ª—å', await get_worker_chat(app), '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 10)
    await msg.edit(f"{SAD} –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª" if answer is None else split_to(answer.text.html, 'üî•'),
        disable_web_page_preview=True
    )

# –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É
@cmd(['mstat', 'ms', 'mstats', '–º—Å—Ç–∞—Ç–∞', '–º—Å—Ç–∞—Ç', '–º—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
async def _stat(app, msg):    
    await msg.edit(f'{LOADING} –ó–∞–≥—Ä—É–∑–∫–∞...')
    answer = await make_request(app, '—Å—Ç–∞—Ç–∞', await get_worker_chat(app), '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 10)
    await msg.edit(f"{SAD} –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª" if answer is None else answer.text.html,
        disable_web_page_preview=True
    )


# –∞–≤—Ç–æ –∞—Ç–∞–∫–∞ –±–æ—Å—Å–∞
@Client.on_message(
    filters.chat('mine_evo_bot') &
    filters.user('mine_evo_bot') &
    filters.regex('üî∂ –¢—ã –≤—ã–±—Ä–∞–ª –±–æ—Å—Å–∞: .*')
)
async def _boss(app, _):    
    await app.send_message(await get_log_chat(app), "–ë—å—é –±–æ—Å—Å–∏–∫–æ–≤", message_thread_id=await get_log_chat(app, True))
    
    await app.db.set(M, 'atc', True)
    
    await attacker(app)
      
# –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–∞—Ç–∞–∫–∏  
@Client.on_message(
    filters.chat('mine_evo_bot') &
    filters.user('mine_evo_bot') &
    (
        filters.regex(".*–¥–ª—è –∞—Ç–∞–∫–∏ –≤—ã–±–µ—Ä–∏ –±–æ—Å—Å–∞\!.*") |
        filters.regex("üéâ –ë–æ—Å—Å")
    ), group=get_group()
)       
async def _stopboss(app, _):
    await app.db.set(M, 'atc', False)
    await app.send_message(await get_log_chat(app), "–ó–∞–∫–æ–Ω—á–∏–ª –±–∏—Ç—å –±–æ—Å—Å–∞", message_thread_id=await get_log_chat(app, True))

# –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞—Ö—Ç—ã
@Client.on_message(
    filters.chat('mine_evo_bot') &
    filters.user('mine_evo_bot') &
    filters.regex('üîì –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è —à–∞—Ö—Ç–∞')
    ,
    group=get_group()
)
async def _new_cave(app, msg):
    await app.send_message('mine_evo_bot', msg.text[23:])


# –ª–æ–≥ –∫–µ–π—Å–æ–≤, –±–æ—Å—Å–æ–≤
@Client.on_message(
    filters.chat(['mine_evo_bot', 'mine_evo_gold_bot', 'mine_evo_emerald_bot']) &
    filters.user(['mine_evo_bot', 'mine_evo_gold_bot', 'mine_evo_emerald_bot']) & (
        filters.regex('[‚ú®|üòÑ|üì¶|üßß|‚úâÔ∏è|üåå|üíº|üëú|üó≥|üïã|üíé|üé≤].*–ù–∞–π–¥–µ–Ω.*') |
        filters.regex('‚ö°Ô∏è.*–Ω–∞—à–µ–ª\(–ª–∞\).*') |
        filters.regex('üéâ –ë–æ—Å—Å')
    ),
    group=get_group()
)
async def _find_cases(app, msg):
    await msg.copy(await get_log_chat(app), message_thread_id=await get_log_chat(app, True))

# –∞–≤—Ç–æ –ø—Ä–æ–º–æ
async def auto_promo(app):
    while True:
        promo_msg = await make_request(app, '–ø—Ä–æ–º–æ', 'mine_evo_bot', timeout=10)
        if promo_msg != None:
            if "—á—Ç–æ–±—ã, –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π:" in promo_msg.text:
                bs = BeautifulSoup(promo_msg.text.html, 'lxml')
                promos = (*map(lambda e: e.text, bs.find_all('code')[2:]),)
                for promo in promos:
                    await app.send_message('mine_evo_bot', f'–ø—Ä–æ–º–æ {promo}')
                    await asyncio.sleep(4)
        else:
            await asyncio.sleep(20)
            continue
        
        await asyncio.sleep(60*60*20)   
                    
# –∞–≤—Ç–æ thx 
async def auto_thx(app):
    while True:
        await app.send_message(await get_worker_chat(app), 'thx')
        
        await asyncio.sleep(60*5)
    
    
# —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–µ–π—Å–æ–≤

async def add_stats(app, type, count):
    await app.db.set(
        "MineEVO.stats", type,
        await app.db.get("MineEVO.stats", type, 0) + count
    )
    await app.db.set(
        "MineEVO.stats.all", type,
        await app.db.get("MineEVO.stats.all", type, 0) + count
    )

@Client.on_message(
    filters.chat(dig_bots) &
    ~filters.me &
    filters.regex('[‚ú®|üòÑ|üì¶|üßß|‚úâÔ∏è|üåå|üíº|üëú|üß≥|üó≥|üïã|üíé|üé≤].*–ù–∞–π–¥–µ–Ω.*'), group=get_group())
async def stats_cases(app, msg):
    count_cases = int(msg.text.split()[-1])
    t = msg.text.lower()
    if "—Ä–µ–¥–∫–∏–π –∫–æ–Ω–≤–µ—Ä—Ç"       in t: await add_stats(app, '—Ä–∫—Ç', count_cases)
    if "—Ä–µ–¥–∫–∏–π –∫–µ–π—Å"          in t: await add_stats(app, '—Ä–∫' , count_cases)
    if "–∑–≤–µ–∑–¥–Ω—ã–π –∫–µ–π—Å"        in t: await add_stats(app, '–∑–≤' , count_cases)
    if "–º–∏—Ñ–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å"      in t: await add_stats(app, '–º–∏—Ñ', count_cases)
    if "–∫—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –∫–µ–π—Å"     in t: await add_stats(app, '–∫—Ä' , count_cases)
    if "–¥–∞–π—Å –∫–µ–π—Å"            in t: await add_stats(app, '–¥–∫' , count_cases)
    if "–∫–µ–π—Å"                 in t: await add_stats(app, '–∫'  , count_cases)
    if "–∫–æ–Ω–≤–µ—Ä—Ç"              in t: await add_stats(app, '–∫—Ç' , count_cases)
    if "—Å—É–º–∫–∞ —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏"   in t: await add_stats(app, '—Å—Å–ø', count_cases)
    if "–ø–æ—Ä—Ç—Ñ–µ–ª—å c —ç—Å–∫–∏–∑–∞–º–∏"  in t: await add_stats(app, '–ø—Å—ç', count_cases)
    if "—á–µ–º–æ–¥–∞–Ω c –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏" in t: await add_stats(app, '—á—Å–ø', count_cases)


# —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–ª–∞–∑–º—ã


@Client.on_message(
    filters.chat(dig_bots) &
    ~filters.me &
    filters.regex('–†—É–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å'), group=get_group())
async def plasma_stats(app, msg):
    if '–ü–ª–∞–∑–º–∞' in msg.text:
        await add_stats(app, '–ø–ª–∞–∑–º–∞', int(msg.text.split()[2]))
    await app.db.set('MineEVO.stats',     'c', (await app.db.get('MineEVO.stats',     'c', 0)) + 1)
    await app.db.set('MineEVO.stats.all', 'c', (await app.db.get('MineEVO.stats.all', 'c', 0)) + 1)


async def add_stats_boss(app, type, count):
    await app.db.set(
        "MineEVO.stats.bosses", type,
        await app.db.get("MineEVO.stats", type, 0) + count
    )

@Client.on_message(
    filters.chat(["mine_evo_bot"]) &
    ~filters.me &
    filters.regex('[üéâ].*–ë–æ—Å—Å.*'), group=get_group())
async def stats_boss(app, msg):
    boss = msg.text.lower().split()
    if "–ø–ª–∞–∑–º–∞"          in boss: await add_stats_boss(app, '–ø–ª–∞–∑–º–∞',   boss[boss.index('–ø–ª–∞–∑–º–∞')     + 1])
    if "–º–µ–¥–∞–ª—å"          in boss: await add_stats_boss(app, '–º–µ–¥–∞–ª—å',   boss[boss.index('–º–µ–¥–∞–ª—å')     + 1])
    if "–º–∏—Ñ–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å" in boss: await add_stats_boss(app, '–º–∏—Ñ',      boss[boss.index('–º–∏—Ñ–∏—á–µ—Å–∫–∏–π') + 2])
    if "—Ä–µ–¥–∫–∏–π –∫–µ–π—Å"     in boss: await add_stats_boss(app, '—Ä–∫',       boss[boss.index('—Ä–µ–¥–∫–∏–π')     + 2])
    if "–∫–µ–π—Å"            in boss: await add_stats_boss(app, '–∫',        boss[boss.index('–∫–µ–π—Å')       + 1])
    if "—ç—Å—Å–µ–Ω—Ü–∏—è"        in boss: await add_stats_boss(app, '—ç—Å—Å–µ–Ω—Ü–∏—è', boss[boss.index('—ç—Å—Å–µ–Ω—Ü–∏—è')   + 1])
    if "—Å–∫—Ä–∞–ø"           in boss: await add_stats_boss(app, '—Å–∫—Ä–∞–ø',    boss[boss.index('—Å–∫—Ä–∞–ø')      + 1])
    if "–Ω–∞–Ω–µ—Å–µ–Ω–æ"        in boss: await add_stats_boss(app, '—É—Ä–æ–Ω',     boss[boss.index('–Ω–∞–Ω–µ—Å–µ–Ω–æ')   + 1])
    if "—Å–¥–µ–ª–∞–Ω–æ"         in boss: await add_stats_boss(app, '—É–¥–∞—Ä—ã',    boss[boss.index('—Å–¥–µ–ª–∞–Ω–æ')    + 1])
